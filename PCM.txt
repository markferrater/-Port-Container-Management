package activity;

import java.util.ArrayDeque;
import java.util.Scanner;

class Container {
    String id;
    String description;
    int weight;

    public Container(String id, String description, int weight) {
        this.id = id;
        this.description = description;
        this.weight = weight;
    }

    public String toString() {
        return id + " | " + description + " | " + weight + "kg";
    }
}

class Ship {
    String name;
    String captain;

    public Ship(String name, String captain) {
        this.name = name;
        this.captain = captain;
    }

    public String toString() {
        return name + " | " + "Capt. " + captain;
    }
}


public class PCM {
    static ArrayDeque<Container> containerStack = new ArrayDeque<>();
    static ArrayDeque<Ship> shipQueue = new ArrayDeque<>();
    static Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) {

        while (true) {
         
        	System.out.println("=== Port Container Management System ===\r\n"
        			+ "[1] Store container \r\n"
        			+ "[2] View port containers\r\n"
        			+ "[3] Register arriving ship\r\n"
        			+ "[4] View waiting ships\r\n"
        			+ "[5] Load next ship \r\n"
        			+ "[0] Exit");
           
            int choice = scanner.nextInt();
            scanner.nextLine();  

            
            switch (choice) {
                case 1:
                    storeContainer();
                    break;
                case 2:
                    viewContainers();
                    break;
                case 3:
                    registerShip();
                    break;
                case 4:
                    viewShips();
                    break;
                case 5:
                    loadNextShip();
                    break;
                case 0:
                    System.out.println("Exiting");
                    break;
                default:
                    System.out.println("Invalid choice! Try again.");
            }
           
            
            
        }
    }

    private static void storeContainer() {
        System.out.print("Enter container ID: ");
        String id = scanner.nextLine();
        System.out.print("Enter container description: ");
        String description = scanner.nextLine();
        System.out.print("Enter container weight (kg): ");
        int weight = scanner.nextInt();
        scanner.nextLine(); 

        Container container = new Container(id, description, weight);
        containerStack.push(container);
        System.out.println("Stored: " + container);
    }

    private static void viewContainers() {
        if (containerStack.isEmpty()) {
            System.out.println("No containers in the port.");
            return;
        }

        System.out.println("TOP →");
        for (Container container : containerStack) {
            System.out.println(container);
        }
        System.out.println("← BOTTOM");
    }

    private static void registerShip() {
        System.out.print("Enter ship name: ");
        String name = scanner.nextLine();
        System.out.print("Enter ship captain: ");
        String captain = scanner.nextLine();

        Ship ship = new Ship(name, captain);
        shipQueue.offer(ship);
        System.out.println("Registered: " + ship);
    }

    private static void viewShips() {
        if (shipQueue.isEmpty()) {
            System.out.println("No ships waiting.");
            return;
        }

        System.out.println("FRONT →");
        for (Ship ship : shipQueue) {
            System.out.println(ship);
        }
        System.out.println("← REAR");
    }

    private static void loadNextShip() {
        if (containerStack.isEmpty() || shipQueue.isEmpty()) {
            System.out.println("No containers or ships available for loading.");
            return;
        }

        Container container = containerStack.pop();
        Ship ship = shipQueue.poll();

        System.out.println("Loaded: " + container + " → " + ship);
        System.out.println("Remaining containers: " + containerStack.size());
        System.out.println("Remaining ships waiting: " + shipQueue.size());
    }
}

